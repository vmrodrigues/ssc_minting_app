{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts","connection.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","done","marginBottom","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","waitForActiveToken","setWaitForActiveToken","useEffect","mint","a","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","ACTIVE","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","CIVIC_GATEKEEPER_NETWORK","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","SuperStarImage","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","cluster","anchorWallet","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","error","hideDuration","Connection","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","startsWith","beforeTransactions","afterTransactions","connected","program","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","setTimeout","Container","marginTop","maxWidth","position","textAlign","src","alt","paddingBottom","backgroundColor","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","val","clientId","mintConfig","environment","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","e","getCandyMachineId","clusterApiUrl","App","endpoint","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Fragment","id","href","document","getElementById","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","txid","timeout","queryStatus","slot","confirmations","subId","Promise","resolve","reject","getSignatureStatuses","signatureStatuses","sleep","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","getProgramState","fetchIdl","idl","account","fetch","getCurrentBlockTime","getSlot","getBlockTime","all","currentBlockTime","timeDiff","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","txs","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","push","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","t","mintTxn","ms","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","signatures","sig","equals","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","result","getUnixTs","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","onSignature","context"],"mappings":"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","file":"static/js/main.665e6da8.chunk.js","sourcesContent":["import { Paper } from \"@material-ui/core\";\nimport Countdown from \"react-countdown\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      padding: theme.spacing(0),\n      \"& > *\": {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignContent: \"center\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        background: \"#384457\",\n        color: \"white\",\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: \"flex\",\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: \"column\",\n      alignContent: \"center\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      background: \"#384457\",\n      color: \"white\",\n      borderRadius: 5,\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n  })\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\nimport { CandyMachineAccount } from \"./candy-machine\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from \"@identity.com/solana-gateway-ts\";\nimport { CIVIC_GATEKEEPER_NETWORK } from \"./utils\";\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background-color: #F9CA36;\n  color: #F930B0;\n  font-size: 16px;\n  font-weight: bold;\n  :hover {\n    background-color: #efc307;\n    ;\n  }\n`; // add your own styles here\n//   background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n  const [waitForActiveToken, setWaitForActiveToken] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return \"SOLD OUT\";\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return \"WHITELIST MINT\";\n    }\n\n    return \"MINT\";\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find((state) => previousGatewayStatus === state) &&\n      !invalidToStates.find((state) => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log(\"change: \", GatewayStatus[gatewayStatus]);\n  }, [waitForActiveToken, previousGatewayStatus, gatewayStatus]);\n\n  useEffect(() => {\n    if (waitForActiveToken && gatewayStatus === GatewayStatus.ACTIVE) {\n      console.log(\"Minting after token active\");\n      setWaitForActiveToken(false);\n      onMint();\n    }\n  }, [waitForActiveToken, gatewayStatus, onMint]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === CIVIC_GATEKEEPER_NETWORK) {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              setWaitForActiveToken(true);\n              await requestGatewayToken();\n              console.log(\"after: \", gatewayStatus);\n            }\n          } else if (\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                \"_blank\"\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  \"confirmed\"\n                )\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n// Add this import line at the top\nimport { CrossmintPayButton } from \"@crossmint/client-sdk-react-ui\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from \"./candy-machine\";\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\n//import KING7 from '/img/KING7.GIF'; \n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background-color: #F9CA36;\n  color: #F930B0;\n  font-size: 16px;\n  font-weight: bold;\n  :hover {\n    background-color: #efc307;\n    ;\n  }\n`;\n\nconst SuperStarImage = styled(\"img\")`\n  width: 100%;\n  height: 350px;\n  object-fit: cover;\n  object-position: top;\n  margin-bottom: 10px;\n  border-radius: 10px;\n\n`; \n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n  error?: string;\n}\n\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const cluster = props.network;\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = \"confirmed\") => {\n      if (!anchorWallet) {\n        return;\n      }\n      if (props.error !== undefined) {\n        setAlertState({\n          open: true,\n          message: props.error,\n          severity: \"error\",\n          hideDuration: null,\n        });\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection\n          );\n          console.log(\"Candy machine state: \", cndy);\n          let active = cndy?.state.goLiveDate\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\n            : false;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                \"There was a problem fetching whitelist token balance\"\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log(\"There was a problem fetching SPL token balance\");\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey)\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            const limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith(\"failed to get info about account\")\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: \"error\",\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: \"error\",\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = []\n  ) => {\n    try {\n      setIsUserMinting(true);\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Please sign account setup transaction\",\n            severity: \"info\",\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                \"Setup transaction succeeded! Please sign minting transaction\",\n              severity: \"info\",\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: \"Mint failed! Please try again!\",\n              severity: \"error\",\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Please sign minting transaction\",\n            severity: \"info\",\n          });\n        }\n\n        const mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              \"processed\"\n            );\n          console.log(\"Metadata status: \", !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          const remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState(\"processed\");\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n            severity: \"error\",\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  \n  return (\n    <Container style={{ marginTop: 25 }}>\n      <Container maxWidth=\"xs\" style={{ \n        position: \"relative\",\n        textAlign: \"center\"\n        }}>\n        <h2 >SUPERSTAR: THE KING7</h2>\n        <SuperStarImage style={{ marginTop: 5 }} src='/img/KING7.GIF' alt=\"SUPER STAR KING7 \"></SuperStarImage>\n\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: \"#F930B0\",\n            borderRadius: 6,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n            \n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? \"Discount Price\"\n                        : \"Price\"}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: \"bold\" }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: \"bold\" }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? \"COMPLETED\"\n                              : isPresale\n                              ? \"PRESALE\"\n                              : \"LIVE\"\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: \"bold\" }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    cluster={cluster}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={(val) => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={(val) => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <CrossmintPayButton\n            clientId=\"c23ef00b-ff4f-4def-9d78-b25fc6c5285b\"\n            mintConfig={{\"type\":\"candy-machine\"}}\n            environment=\"staging\"\n            className=\"my-custom-crossmint-button\"\n          />\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: \"grey\" }}\n          >\n            \n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Home from \"./Home\";\nimport { DEFAULT_TIMEOUT } from \"./connection\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\n  } catch (e) {\n    console.log(\"Failed to construct CandyMachineId\", e);\n    return undefined;\n  }\n};\n\nlet error: string | undefined = undefined;\n\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\n}\n\nconst candyMachineId = getCandyMachineId();\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\n  \"devnet\") as WalletAdapterNetwork;\nconst rpcHost =\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={DEFAULT_TIMEOUT}\n              rpcHost={rpcHost}\n              network={network}\n              error={error}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\nimport \"./style.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <React.Fragment>\n      <header className=\"header\" id=\"header\">\n              <div className=\"container\">\n              <div className=\"header__inner\">\n              </div>\n              </div>\n      </header>\n      <div className=\"menu__wrapper\">\n\t\t<div className=\"container\">\n\t\t\t<ul className=\"menu\">\n\t\t\t\t<li className=\"menu__item\">\n\t\t\t\t\t<a href=\"https://superstarclub.io#coll\" className=\"menu__link\" data-smooth=\"smooth\">\n\t\t\t\t\t\tTHE COLLECTION\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t\t<li className=\"menu__item\">\n\t\t\t\t\t<a href=\"https://superstarclub.io#util\" className=\"menu__link\" data-smooth=\"smooth\">\n\t\t\t\t\t\tUTILITIES\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t\t<li className=\"menu__item\">\n\t\t\t\t\t<a href=\"https://superstarclub.io#map\" className=\"menu__link\" data-smooth=\"smooth\">\n\t\t\t\t\t\tROAD MAP\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t\t<li className=\"menu__item\">\n\t\t\t\t\t<a href=\"https://superstarclub.io#team\" className=\"menu__link\" data-smooth=\"smooth\">\n\t\t\t\t\t\tTHE TEAM\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n        <li className=\"menu__item\">\n\t\t\t\t\t<a href=\"/\" className=\"menu__link\" data-smooth=\"smooth\">\n\t\t\t\t\t\tMINTING\n\t\t\t\t\t</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n    </div>\n      </React.Fragment>\n       <App />\n  </React.StrictMode>,\n  \n  document.getElementById(\"root\")\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return \"--\";\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\n);\n\nexport const CIVIC_GATEKEEPER_NETWORK =\n  \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\";\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\n    CIVIC\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from(\"gateway\"),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","/* eslint-disable */\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from \"@solana/web3.js\";\nimport { sendTransactions, SequenceType } from \"./connection\";\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from \"./utils\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: null | anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  const subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"processed\",\n  });\n\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n    return [program, state];\n  };\n\n  const getCurrentBlockTime = async (): Promise<number> => {\n    const slot = await connection.getSlot();\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\n  };\n\n  const [[program, state], currentBlockTime] = await Promise.all([\n    getProgramState(),\n    getCurrentBlockTime(),\n  ]);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\n  const goLiveDate =\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"collection_authority\"),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        [],\n        []\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log(\"SetupState: \", setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1\n        ),\n      ]\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress\n  );\n\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    })\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          })\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions\n      )\n    ).txs.map((t) => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","/* eslint-disable */\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from \"@solana/web3.js\";\n\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  const toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          \"single\"\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          \"single\"\n        );\n        ids = ids.concat(txs.map((t) => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      \"Died on \",\n      stopPoint,\n      \"retrying from instruction\",\n      instructions[stopPoint],\n      \"instructions length is\",\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = []\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    const transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i)\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log(\"Failed at txn index:\", i);\n        console.log(\"Caught failure:\", e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (!Array.isArray(instructions)) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map((s) => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map((s) => s.publicKey)\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  const options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error(\"Timeout Error caught\", err);\n    if (err.timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"],"sourceRoot":""}